const express = require("express");
const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const router = express.Router();

// üîπ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (GET)
router.get("/register", (req, res) => {
  res.render("register"); // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç views/register.ejs
});

// üîπ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ (GET)
router.get("/login", (req, res) => {
  res.render("login"); // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç views/login.ejs
});

// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (POST)
router.post("/register", async (req, res) => {
  const { name, email, password } = req.body;
  try {
    let user = await User.findOne({ email });
    if (user) return res.status(400).send("Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");

    user = new User({ name, email, password });
    await user.save();
    res.redirect("/login");
  } catch (err) {
    res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});

// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ (POST)
router.post("/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).send("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).send("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });
    res.cookie("token", token, { httpOnly: true });
    res.redirect("/tasks");
  } catch (err) {
    res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});

module.exports = router;
